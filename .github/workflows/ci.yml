name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sundays for security scans

permissions:
  contents: read
  security-events: write
  pull-requests: read

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ['1.21', '1.24']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Verify dependencies
      shell: bash
      run: |
        # Check file existence for debugging
        echo "Checking if go.mod and go.sum exist"
        if [ -f "go.mod" ]; then
          echo "go.mod exists"
        else
          echo "go.mod does not exist"
          exit 1
        fi
        
        if [ -f "go.sum" ]; then
          echo "go.sum exists"
        else
          echo "go.sum does not exist, will be created by go mod tidy"
        fi
        
        # Download and tidy dependencies
        go mod download
        go mod tidy

    - name: Run tests
      shell: bash
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./stl/... || (echo "Tests failed" && exit 1)

    - name: Run examples
      shell: bash
      run: go run ./examples/main.go

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'
        cache: true

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m
        only-new-issues: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      id: go
      uses: actions/setup-go@v5
      with:
        go-version: "1.24"
        check-latest: true

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go

    - name: Verify dependencies
      shell: bash
      run: |
        go mod download
        go mod tidy
        # Ensure go.sum exists
        if [ ! -f "go.sum" ]; then
          touch go.sum
        fi

    - name: Install govulncheck
      run: go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run govulncheck
      run: govulncheck ./...

    - name: Run gosec security scanner
      shell: bash
      run: |
        # Direct installation of gosec
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        # Verify gosec installation
        which gosec || echo "gosec not found in PATH"
        # Run gosec with full output
        gosec -fmt=json -out=gosec-results.json ./stl || echo "gosec JSON output failed"
        gosec -fmt=sarif -out=gosec-results.sarif ./stl || echo "gosec SARIF output failed"
        # Show results summary
        gosec ./stl || echo "gosec scan failed"
        # Ensure SARIF file exists for upload
        if [ ! -f "gosec-results.sarif" ]; then
          echo "Creating minimal valid SARIF file"
          echo '{"version":"2.1.0","runs":[]}' > gosec-results.sarif
        fi

    - name: Install Nancy
      run: go install github.com/sonatype-nexus-community/nancy@latest

    - name: Check dependencies with Nancy
      run: |
        go list -json -m all | nancy sleuth

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Upload gosec results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif
        category: gosec

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./stl