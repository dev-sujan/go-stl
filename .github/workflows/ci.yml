name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: ["1.21", "1.22"]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
        timeout-minutes: 10
        retries: 3

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            go test -v -race -coverprofile="coverage.txt" -covermode=atomic "./stl"
          else
            go test -v -race -coverprofile=coverage.txt -covermode=atomic ./stl
          fi

      - name: Run examples
        shell: bash
        run: go run ./examples/main.go

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.txt
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest

      - name: Run golangci-lint
        run: golangci-lint run

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22.0"
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-security-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-security-

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go

      - name: Run gosec security scanner
        uses: securego/gosec@v2.19.0
        with:
          args: "-fmt sarif -out gosec-results.sarif ./stl"

      - name: Install Nancy
        run: go install github.com/sonatype-nexus-community/nancy@latest

      - name: Check dependencies with Nancy
        run: |
          go list -json -m all | nancy sleuth

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Upload gosec results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif
          category: gosec

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.22"

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./stl
